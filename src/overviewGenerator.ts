import fs from 'fs';
import path from 'path';
import ignore from 'ignore';
import yaml from 'js-yaml';
import { readGitignore, isIgnored, encodeXML } from './fileUtils.js';
import { ALWAYS_IGNORE, ASTROLARK_MARKER } from './constants.js';

export function generateOverview(rootPath: string, format: 'xml' | 'yaml'): { 
  content: string, 
  ignoredFiles: Map<string, string[]>
} {
  const gitignorePatterns = readGitignore(rootPath);
  const ig = ignore().add(gitignorePatterns).add(ALWAYS_IGNORE);
  let structure: string[] = [];
  let files: { [key: string]: string } = {};
  let ignoredFiles: Map<string, string[]> = new Map();

  function traverseDirectory(dir: string, depth: number = 0): void {
    const filesInDir = fs.readdirSync(dir);
    filesInDir.forEach((file, index) => {
      const filePath = path.join(dir, file);
      const relativePath = path.relative(rootPath, filePath);
      
      if (isIgnored(filePath, rootPath, ig)) {
        ignoredFiles.set(relativePath, ['ignored']);
        return;
      }

      const isLast = index === filesInDir.length - 1;
      const prefix = '  '.repeat(depth) + (isLast ? '└─ ' : '├─ ');
      structure.push(`${prefix}${file}`);

      if (fs.statSync(filePath).isDirectory()) {
        traverseDirectory(filePath, depth + 1);
      } else {
        const content = fs.readFileSync(filePath, 'utf-8');
        files[relativePath] = content;
      }
    });
  }

  traverseDirectory(rootPath);

  let content: string;
  if (format === 'xml') {
    content = `<?xml version="1.0" encoding="UTF-8"?>
<!-- ${ASTROLARK_MARKER} -->
<project-overview>
  <description>
    This file was generated by astrolark. It provides an XML representation of a project's structure ('structure' section) + contents of text files. Binary files, lock files, and files matching .gitignore patterns are excluded.
  </description>
  <structure>
${structure.map(line => `    ${encodeXML(line)}`).join('\n')}
  </structure>
  <files>
${Object.entries(files).map(([path, content]) => `    <file path="${encodeXML(path)}">
<![CDATA[${content}]]>
    </file>`).join('\n')}
  </files>
</project-overview>`;
  } else {
    content = `# ${ASTROLARK_MARKER}\n` + yaml.dump({
      ABOUT_ASTROLARK: `This file was generated by Astrolark. ASTROLARK is a command line tool that can help users copy content from a filesystem and keep enough metadata for helping the LLM Make decisions. If user wants they can use astrolark -x to make edits if the clipboard contains ASTROLARK_EDIT_FORMAT.`,
      ASTROLARK_EDIT_FORMAT: `JUST PRINT IN (ARTIFACT OR CODE BLOCK wherever user can copy easily without loosing formatting) LIKE:
@@<ALK path=“relative/absolute path to file1”>
changes in file1
@@<ALK:NO CHANGES />
changes in file1
@@<ALK:NO CHANGES />
changes in file1
@@</ALK>
@@<ALK path=“relative/absolute path to file2”>
changes in file2
@@<ALK:NO CHANGES />
changes in file2
@@</ALK>`,
      structure: structure,
      files: files
    });
  }

  return { content, ignoredFiles };
}
